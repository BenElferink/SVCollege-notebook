{"version":3,"sources":["ContextAPI.js","components/HomePage.jsx","components/HomeBtn.jsx","components/Register.jsx","components/Action.jsx","components/Welcome.jsx","components/ManageUser.jsx","components/Manager.jsx","App.js","index.js"],"names":["UsersContext","React","createContext","UsersProvider","props","useState","users","setUsers","Provider","value","children","HomePage","setLoggedInUser","useContext","username","setUsername","password","setPassword","history","useHistory","type","placeholder","onChange","e","target","to","onClick","push","copyOfAllUsers","indexOfExistingUser","i","length","window","alert","HomeBtn","Register","loggedInUser","isEditMode","useRef","undefined","current","id","setId","verifyId","valid","charAt","verifyUsername","verifyPassword","passwordConfirm","setPasswordConfirm","verifyPasswordConfirm","money","setMoney","verifyMoney","copyOfMoney","Number","copyOfLoggedInUser","newUsers","transactions","Action","user","amount","setAmount","text","setText","newTransaction","previousAmountInAccount","Welcome","loggedState","showActionComponent","setShowActionComponent","className","ManageUser","showMore","setShowMore","map","transaction","index","splice","deleteTransaction","Manager","App","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8686cff0.chunk.js","sourcesContent":["import React from 'react';\n\nexport const UsersContext = React.createContext();\n\nexport const UsersProvider = (props) => {\n  const [users, setUsers] = React.useState([]);\n\n  return <UsersContext.Provider value={[users, setUsers]}>{props.children}</UsersContext.Provider>;\n};\n","import React, { useState, useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { UsersContext } from './../ContextAPI';\n\nfunction HomePage({ setLoggedInUser }) {\n  const [users] = useContext(UsersContext);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const history = useHistory();\n\n  const clickEnter = () => {\n    if (username === 'ADMIN' && password === 'ADMIN') {\n      // first handle admin request\n      history.push('/admin'); // redirect the page\n    } else {\n      // if not an admin, continue with default verification\n      let copyOfAllUsers = [...users],\n        indexOfExistingUser = false;\n\n      // loop through all users and find the user by username\n      for (let i = 0; i < copyOfAllUsers.length; i++) {\n        if (copyOfAllUsers[i].username === username) {\n          indexOfExistingUser = i;\n          break;\n        }\n      }\n\n      // if user was found (meaning it exists)\n      if (indexOfExistingUser !== false) {\n        // verify it's password\n        if (copyOfAllUsers[indexOfExistingUser].password === password) {\n          // and login\n          setLoggedInUser(copyOfAllUsers[indexOfExistingUser]);\n          window.alert('Logged in successfully');\n          history.push(`/${username}`); // redirect the page\n        } else {\n          window.alert('Password incorrect!');\n        }\n      } else {\n        window.alert('Username does not exist!');\n      }\n    }\n  };\n\n  return (\n    <>\n      <h1>SV-BANK</h1>\n      <input\n        type='text'\n        placeholder='Username'\n        value={username}\n        onChange={(e) => {\n          setUsername(e.target.value);\n        }}\n      />\n      <input\n        type='password'\n        placeholder='Password'\n        value={password}\n        onChange={(e) => {\n          setPassword(e.target.value);\n        }}\n      />\n      <Link to='/register'>Create new user</Link>\n      <button onClick={clickEnter}>ENTER</button>\n    </>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction HomeBtn({ onClick }) {\n  return (\n    <Link to='/'>\n      <button onClick={onClick}>Home</button>\n    </Link>\n  );\n}\n\nexport default HomeBtn;\n","import React, { useState, useContext, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { UsersContext } from './../ContextAPI';\nimport HomeBtn from './HomeBtn';\n\nfunction Register({ loggedInUser, setLoggedInUser }) {\n  const isEditMode = useRef(loggedInUser === undefined ? false : true);\n  // this useRef checks if the user entered page as logged in --> edit mode\n  // or has entered as new user --> create mode\n\n  const [users, setUsers] = useContext(UsersContext);\n  const history = useHistory();\n\n  const [id, setId] = useState(isEditMode.current ? loggedInUser.id : '');\n  const verifyId = () => {\n    // checks that the ID length is 9, and contains numbers only\n    let valid;\n    if (id.length === 9) {\n      valid = true;\n      for (let i = 0; i < id.length; i++) {\n        if (id.charAt(i) >= '0' && id.charAt(i) <= '9') {\n          // checks numbers as string, because the typed value given to state is stringified\n          continue;\n        } else {\n          valid = false;\n          break;\n        }\n      }\n    } else {\n      valid = false;\n    }\n    return valid; // true or false\n  };\n\n  const [username, setUsername] = useState(isEditMode.current ? loggedInUser.username : '');\n  const verifyUsername = () => {\n    // checks that the username is at least 4 characters\n    let valid;\n    if (username.length >= 4) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid; // true or false\n  };\n\n  const [password, setPassword] = useState(isEditMode.current ? loggedInUser.password : '');\n  const verifyPassword = () => {\n    // checks that the password is at least 6 characters\n    let valid;\n    if (password.length >= 6) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid; // true or false\n  };\n\n  const [passwordConfirm, setPasswordConfirm] = useState('');\n  const verifyPasswordConfirm = () => {\n    // checks that the confirmed password is equal to the first password\n    let valid;\n    if (passwordConfirm === password) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid; // true or false\n  };\n\n  const [money, setMoney] = useState(isEditMode.current ? loggedInUser.money : '');\n  const verifyMoney = () => {\n    // checks that the money is between 0 and 1 million\n    let valid,\n      copyOfMoney = Number(money);\n    if (copyOfMoney >= 0 && copyOfMoney <= 1000000) {\n      valid = true;\n    } else {\n      valid = false;\n    }\n    return valid; // true or false\n  };\n\n  const clickCreate = () => {\n    if (verifyId() && verifyUsername() && verifyPassword() && verifyPasswordConfirm() && verifyMoney()) {\n      // if all verifications return true, add new user\n      let newUsers = {\n        id,\n        username,\n        password,\n        money,\n        transactions: [],\n      };\n      let copyOfAllUsers = [...users];\n      copyOfAllUsers.push(newUsers);\n      setUsers(copyOfAllUsers);\n      window.alert('User created successfully!');\n      history.push('/'); // redirect the page\n    } else {\n      // one or more verifications returned 'false', display an error\n      window.alert('An error occured, failed to create user!');\n    }\n  };\n\n  const clickSaveEdit = () => {\n    if (verifyId() && verifyUsername() && verifyPassword() && verifyPasswordConfirm() && verifyMoney()) {\n      // if all verifications return true, save changes\n      let copyOfLoggedInUser = { ...loggedInUser }; // copy\n      copyOfLoggedInUser.id = id; // update\n      copyOfLoggedInUser.username = username; // update\n      copyOfLoggedInUser.password = password; // update\n      copyOfLoggedInUser.money = money; // update\n\n      let copyOfAllUsers = [...users]; // copy\n      for (let i = 0; i < copyOfAllUsers.length; i++) {\n        // loop through all users\n        if (copyOfAllUsers[i].id === loggedInUser.id) {\n          // find the user by it's --previous-- ID (it may have changed)\n          copyOfAllUsers[i] = copyOfLoggedInUser; // update exisiting changes to exisiting user\n          break;\n        }\n      }\n\n      setUsers(copyOfAllUsers);\n      setLoggedInUser(copyOfLoggedInUser);\n      window.alert('Changes saved successfully!');\n      history.push(`/${username}`); // redirect the page\n    } else {\n      // one or more verifications returned 'false', display an error\n      window.alert('An error occured, failed to save changes!');\n    }\n  };\n\n  return (\n    <>\n      <h1>REGISTER</h1>\n\n      <input\n        type='number'\n        placeholder='ID'\n        value={id}\n        onChange={(e) => {\n          setId(e.target.value);\n        }}\n      />\n      <input\n        type='text'\n        placeholder='Username'\n        value={username}\n        onChange={(e) => {\n          setUsername(e.target.value);\n        }}\n      />\n      <input\n        type='password'\n        placeholder='Password'\n        value={password}\n        onChange={(e) => {\n          setPassword(e.target.value);\n        }}\n      />\n      <input\n        type='password'\n        placeholder='Confirm password'\n        value={passwordConfirm}\n        onChange={(e) => {\n          setPasswordConfirm(e.target.value);\n        }}\n      />\n      <input\n        type='number'\n        placeholder='Money'\n        value={money}\n        onChange={(e) => {\n          setMoney(e.target.value);\n        }}\n      />\n\n      <button onClick={isEditMode.current ? clickSaveEdit : clickCreate}>{isEditMode.current ? 'Save' : 'Create'}</button>\n      <HomeBtn />\n    </>\n  );\n}\n\nexport default Register;\n","import React, { useState, useContext } from 'react';\nimport { UsersContext } from './../ContextAPI';\n\nfunction Action({ user }) {\n  const [users, setUsers] = useContext(UsersContext);\n  const [amount, setAmount] = useState('');\n  const [text, setText] = useState('');\n\n  const clickPay = () => {\n    let newTransaction = { amount, text }; // create transaction item\n    let copyOfAllUsers = [...users];\n    for (let i = 0; i < copyOfAllUsers.length; i++) {\n      // loop through all users\n      if (copyOfAllUsers[i].id === user.id) {\n        // target current user using it's ID (usually unique to an individual, this test doesn't require that verification!)\n        copyOfAllUsers[i].transactions.push(newTransaction); // add new transaction to selected user\n\n        // then deduct the amount from\n        let previousAmountInAccount = Number(copyOfAllUsers[i].money); // copy previous data\n        previousAmountInAccount -= Number(amount); // deduct amount from data\n        previousAmountInAccount = `${previousAmountInAccount}`; // stringify the changes\n        copyOfAllUsers[i].money = previousAmountInAccount; // update changes\n        break;\n      }\n    }\n    setUsers(copyOfAllUsers); // save all manipulations\n    window.alert('Transaction made!');\n  };\n\n  return (\n    <div>\n      <input\n        type='number'\n        placeholder='Amount of $'\n        value={amount}\n        onChange={(e) => {\n          setAmount(e.target.value);\n        }}\n      />\n      <input\n        type='text'\n        placeholder='Name this transaction'\n        value={text}\n        onChange={(e) => {\n          setText(e.target.value);\n        }}\n      />\n      <button onClick={clickPay}>Pay</button>\n    </div>\n  );\n}\n\nexport default Action;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Action from './Action';\nimport HomeBtn from './HomeBtn';\n\nfunction Welcome({ user, loggedState }) {\n  const [loggedInUser, setLoggedInUser] = loggedState;\n  const [showActionComponent, setShowActionComponent] = useState(false);\n  const history = useHistory();\n\n  const clickBalance = () => {\n    window.alert(`You have $${user.money} in your account.`); // just an alert\n  };\n\n  const clickAction = () => {\n    setShowActionComponent(!showActionComponent); // reveals the component, or hides it if clicked again\n  };\n\n  const clickExit = () => {\n    setLoggedInUser({}); // makes sure the user is unset from it's \"logged in state\"\n    history.push('/'); // redirect the page\n  };\n\n  const clickEdit = () => {\n    history.push('/edit');\n  };\n\n  return (\n    <>\n      {user.id === loggedInUser.id ? ( // verifies that the user did pass the login stage !!\n        <>\n          <h1>Welcome</h1>\n          <h3>{user.username}</h3>\n\n          {showActionComponent && <Action user={user} />}\n\n          <div className='welcome-buttons'>\n            <button onClick={clickBalance}>Balance</button>\n            <button onClick={clickAction}>Action</button>\n            <button onClick={clickExit}>Exit</button>\n            <button onClick={clickEdit}>Edit</button>\n          </div>\n        </>\n      ) : (\n        <>\n          <p>You must be logged in to view this page!</p>\n          <HomeBtn />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Welcome;\n","import React, { useState } from 'react';\n\nfunction ManageUser({ user, users, setUsers }) {\n  const [showMore, setShowMore] = useState(false);\n\n  const deleteTransaction = (index) => {\n    let copyOfAllUsers = [...users];\n    for (let i = 0; i < copyOfAllUsers.length; i++) {\n      // loop through all users\n      if (copyOfAllUsers[i].id === user.id) {\n        // locate user by ID\n        // when found, manipulate it's transactions\n        copyOfAllUsers[i].transactions.splice(index, 1);\n        break;\n      }\n    }\n    setUsers(copyOfAllUsers);\n  };\n\n  const deleteUser = () => {\n    let copyOfAllUsers = [...users];\n    for (let i = 0; i < copyOfAllUsers.length; i++) {\n      // loop through all users\n      if (copyOfAllUsers[i].id === user.id) {\n        // locate user by ID\n        // when found, delete it\n        copyOfAllUsers.splice(i, 1);\n        break;\n      }\n    }\n    setUsers(copyOfAllUsers);\n  };\n\n  return (\n    <>\n      <li>\n        {user.id} {user.username}{' '}\n        <button\n          onClick={() => {\n            setShowMore(!showMore);\n          }}>\n          More\n        </button>\n      </li>\n      <ul>\n        {showMore && (\n          <>\n            {user.transactions.map((transaction, i) => (\n              <li key={i} className='manage-transaction'>\n                {transaction.text} {transaction.amount}{' '}\n                <button\n                  className='delete-transaction'\n                  onClick={() => {\n                    deleteTransaction(i);\n                  }}>\n                  &times;\n                </button>\n              </li>\n            ))}\n            <button className='delete-user' onClick={deleteUser}>\n              Delete User\n            </button>\n          </>\n        )}\n      </ul>\n    </>\n  );\n}\n\nexport default ManageUser;\n","import React, { useContext } from 'react';\nimport { UsersContext } from './../ContextAPI';\nimport ManageUser from './ManageUser';\nimport HomeBtn from './HomeBtn';\n\nfunction Manager() {\n  const [users, setUsers] = useContext(UsersContext);\n\n  return (\n    <>\n      <h1>Manager</h1>\n\n      <ul>\n        {users.map((user) => (\n          <ManageUser key={user.id} user={user} users={users} setUsers={setUsers} />\n        ))}\n      </ul>\n\n      <HomeBtn />\n    </>\n  );\n}\n\nexport default Manager;\n","import React, { useState, useContext } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { UsersContext } from './ContextAPI';\nimport './style/style.css';\nimport HomePage from './components/HomePage';\nimport Register from './components/Register';\nimport Welcome from './components/Welcome';\nimport Manager from './components/Manager';\n\nfunction App() {\n  const [users] = useContext(UsersContext); // state at ContactAPI.js --> Provider at index.js\n  const [loggedInUser, setLoggedInUser] = useState({}); // verifies that the user is logged in,\n  // --> I am doing this so a user cannot manually type the link and bypass the login steps to view the page\n\n  return (\n    <div className='App'>\n      <Router>\n        <Switch>\n          <Route exact path='/' component={() => <HomePage setLoggedInUser={setLoggedInUser} />} />\n          <Route exact path='/admin' component={() => <Manager />} />\n          <Route exact path='/register' component={() => <Register />} />\n          <Route exact path='/edit' component={() => <Register loggedInUser={loggedInUser} setLoggedInUser={setLoggedInUser} />} />\n          {users.map((user) => (\n           <Route key={user.id} path={`/${user.username}`} component={() => <Welcome user={user} loggedState={[loggedInUser, setLoggedInUser]} />} />\n          ))}\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { UsersProvider } from './ContextAPI';\n\nReactDOM.render(\n  <React.StrictMode>\n    <UsersProvider>\n      <App />\n    </UsersProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}