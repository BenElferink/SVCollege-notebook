{"version":3,"sources":["components/Post.js","components/NewPost.js","App.js","reportWebVitals.js","index.js"],"names":["Post","props","ttl","inf","NewPost","validTitle","item","setState","title","target","value","length","bgColorTitle","validInfo","info","bgColorInfo","submit","window","alert","state","onChange","this","placeholder","style","backgroundColor","x","onClick","Component","App","className","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAEe,SAASA,EAAKC,GAC3B,OACE,gCACE,6BAAKA,EAAMC,MACX,6BAAKD,EAAME,S,gCCJIC,E,kDAEnB,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IAURI,WAAa,SAACC,GACZ,EAAKC,SAAS,CAAEC,MAAOF,EAAKG,OAAOC,QAE/BJ,EAAKG,OAAOC,MAAMC,OAAS,EAC7B,EAAKJ,SAAS,CAAEK,aAAc,SAE9B,EAAKL,SAAS,CAAEK,aAAc,YAjBf,EAqBnBC,UAAY,SAACP,GACX,EAAKC,SAAS,CAAEO,KAAMR,EAAKG,OAAOC,QAE9BJ,EAAKG,OAAOC,MAAMC,OAAS,EAC7B,EAAKJ,SAAS,CAAEQ,YAAa,SAE7B,EAAKR,SAAS,CAAEQ,YAAa,YA3Bd,EA+BnBC,OAAS,WACPC,OAAOC,MAAP,iBAAuB,EAAKC,MAAMX,MAAlC,kBAAiD,EAAKW,MAAML,QA7B5D,EAAKK,MAAQ,CACXX,MAAO,GACPM,KAAM,GACNF,aAAc,QACdG,YAAa,SAPE,E,0CAmCnB,WACE,OACE,gCACE,uBACEK,SAAUC,KAAKhB,WACfiB,YAAY,QACZC,MAAO,CAAEC,gBAAiBH,KAAKF,MAAMP,gBAEvC,uBACA,uBACEQ,SAAUC,KAAKR,UACfS,YAAY,OACZC,MAAO,CAAEC,gBAAiBH,KAAKF,MAAMJ,eAEvC,uBACCM,KAAKpB,MAAMwB,EACZ,uBACA,wBAAQC,QAASL,KAAKL,OAAtB,2B,GAtD6BW,aC2BtBC,MAxBf,WAQE,OACE,sBAAKC,UAAU,MAAf,UACE,kDAEA,cAAC,EAAD,CAASJ,EAXF,iBACI,CACb,CAAEjB,MAAO,SAAUM,KAAM,aACzB,CAAEN,MAAO,QAASM,KAAM,SACxB,CAAEN,MAAO,QAASM,KAAM,SAYZgB,KAAI,SAACxB,GACb,OAAO,cAACN,EAAD,CAAME,IAAKI,EAAKE,MAAOL,IAAKG,EAAKQ,cCXjCiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.355eca88.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Post(props) {\n  return (\n    <div>\n      <h1>{props.ttl}</h1>\n      <h2>{props.inf}</h2>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nexport default class NewPost extends Component {\n  // rconst -> constructor\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      title: '',\n      info: '',\n      bgColorTitle: 'white',\n      bgColorInfo: 'white',\n    };\n  }\n\n  validTitle = (item) => {\n    this.setState({ title: item.target.value });\n\n    if (item.target.value.length > 5) {\n      this.setState({ bgColorTitle: 'lime' });\n    } else {\n      this.setState({ bgColorTitle: 'tomato' });\n    }\n  };\n\n  validInfo = (item) => {\n    this.setState({ info: item.target.value });\n\n    if (item.target.value.length > 5) {\n      this.setState({ bgColorInfo: 'lime' });\n    } else {\n      this.setState({ bgColorInfo: 'tomato' });\n    }\n  };\n\n  submit = () => {\n    window.alert(`Title: ${this.state.title} Info: ${this.state.info}`);\n  };\n\n  render() {\n    return (\n      <div>\n        <input\n          onChange={this.validTitle}\n          placeholder=\"Title\"\n          style={{ backgroundColor: this.state.bgColorTitle }}\n        />\n        <br />\n        <input\n          onChange={this.validInfo}\n          placeholder=\"Info\"\n          style={{ backgroundColor: this.state.bgColorInfo }}\n        />\n        <br />\n        {this.props.x}\n        <br />\n        <button onClick={this.submit}>Submit</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Post from './components/Post';\nimport NewPost from './components/NewPost';\n\nfunction App() {\n  var name = 'Ben Elferink';\n  var postList = [\n    { title: 'Israel', info: 'Jerusalem' },\n    { title: 'Japan', info: 'Tokyo' },\n    { title: 'Italy', info: 'Rome' },\n  ];\n\n  return (\n    <div className=\"App\">\n      <h1>React - lesson 2</h1>\n\n      <NewPost x={name} />\n\n      {/* <Post ttl={postList[0].title} inf={postList[0].info} />\n      <Post ttl={postList[1].title} inf={postList[1].info} />\n      <Post ttl={postList[2].title} inf={postList[2].info} /> */}\n      {postList.map((item) => {\n        return <Post ttl={item.title} inf={item.info} />;\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}